<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://githubloon.github.io/news/article-60588.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Spring 源码BeanFactory使用的准备及自定义属性值解析器</title>
        <meta name="description" content="BeanFactory 使用前的准备 上一篇文章https://www.cnblogs.com/redwinter/p/16165878.html  介绍了自定义标签的使用，完成了AbstractAp" />
        <link rel="icon" href="/assets/website/img/githubloon/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Github Loon节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://githubloon.github.io/news/article-60588.htm" />
    <meta property="og:site_name" content="Github Loon节点订阅官网" />
    <meta property="og:title" content="Spring 源码BeanFactory使用的准备及自定义属性值解析器" />
    <meta property="og:image" content="https://githubloon.github.io/uploads/20240820/c06f83e14f22adf7153c305da375393f.webp" />
        <meta property="og:release_date" content="2025-02-21T09:21:49" />
    <meta property="og:updated_time" content="2025-02-21T09:21:49" />
        <meta property="og:description" content="BeanFactory 使用前的准备 上一篇文章https://www.cnblogs.com/redwinter/p/16165878.html  介绍了自定义标签的使用，完成了AbstractAp" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Spring 源码BeanFactory使用的准备及自定义属性值解析器">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Google fonts -->
    <link href="//fonts.googleapis.com/css2?family=DM+Sans:wght@400;700&display=swap" rel="stylesheet">
    <!-- Template CSS -->
    <link rel="stylesheet" href="/assets/website/css/githubloon/style-starter.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-9MPH6JPQCT"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-9MPH6JPQCT');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <div class="header-saas">
        <!-- header -->
        <header id="site-header" class="fixed-top">
            <div class="container">
                <nav class="navbar navbar-expand-lg stroke">
                    <a class="navbar-brand" href="/">
                                        <span>Github Loon</span>
                                        </a>
                    <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                        <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                        </span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                        <ul class="navbar-nav ml-auto">
                                                        <li class="nav-item">
                                <a class="nav-link" href="/">首页</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/free-nodes/">免费节点</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/client.htm">客户端</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/news/">新闻资讯</a>
                            </li>
                                                    </ul>
                    </div>
                    <!-- toggle switch for light and dark theme -->
                    <div class="mobile-position">
                        <nav class="navigation">
                            <div class="theme-switch-wrapper">
                                <label class="theme-switch" for="checkbox">
                                    <input type="checkbox" id="checkbox">
                                    <div class="mode-container">
                                        <i class="gg-sun"></i>
                                        <i class="gg-moon"></i>
                                    </div>
                                </label>
                            </div>
                        </nav>
                    </div>
                    <!-- //toggle switch for light and dark theme -->
                </nav>
            </div>
        </header>
        <!-- //header -->
    </div>
    <div class="innerblock">
    </div>
    <!-- contact-form 2 -->
    <section class="w3l-contact-2 py-5" id="contact">
        <div class="container py-lg-4 py-md-3 py-2">
            <div class="title-content text-center">
                <h1 class="title-toobig">Spring 源码BeanFactory使用的准备及自定义属性值解析器</h1>
                <p class="mt-md-4 mt-3 mx-lg-5 px-lg-5">
                    <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                </p>
            </div>
    </section>
    <!-- section -->
    <section class="w3l-index3" id="about">
        <div class="midd-w3 py-5">
            <div class="container py-lg-5 py-md-3 py-2">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<h3 id="beanfactory-使用前的准备">BeanFactory 使用前的准备</h3> <p>上一篇文章<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/redwinter/p/16165878.html"  target="_blank" rel="nofollow">https://www.cnblogs.com/redwinter/p/16165878.html</a>  介绍了自定义标签的使用，完成了<code>AbstractApplicationContext#refresh</code> 第二个方法 的介绍，本文将继续介绍<code>Spring</code>源码的重要方法<code>AbstractApplicationContext#refresh</code>方法的第三个方法：<code>prepareBeanFactory</code>，准备<code>BeanFactory</code>。</p> <p>源码如下：</p> <pre><code class="language-java">protected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) { 		// Tell the internal bean factory to use the context's class loader etc. 		// 设置类加载器 		beanFactory.setBeanClassLoader(getClassLoader()); 		// 设置Spel 表达式解析器,用于属性填充时对值进行表达式解析 		beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader())); 		// 扩展点，添加一个属性编辑器的注册器,也可以使用 CustomEditorConfigurer 进行设置 		// 后面在进行属性填充的时候会调用这个属性编辑器进行属性的解析 		beanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment()));  		// Configure the bean factory with context callbacks. 		// 扩展点，添加一个BeanPostProcessor 这里添加这个进行处理，使用前置处理器执行下面忽略的六个Aware接口 		beanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this)); 		// 由于上面设置了这六个接口，因此需要忽略掉，不让Spring使用自动装配进行Bean的装配，而是使用BeanPostProcessor 		// 的后置处理器的前置方法进行调用，因为如果不忽略，那么自定义的Bean中就会使用Setter注入进行装配， 		// spring 这样做是为了统一的进行处理在Bean增强的时候 		beanFactory.ignoreDependencyInterface(EnvironmentAware.class); 		beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class); 		beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class); 		beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class); 		beanFactory.ignoreDependencyInterface(MessageSourceAware.class); 		beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);  		// BeanFactory interface not registered as resolvable type in a plain factory. 		// MessageSource registered (and found for autowiring) as a bean. 		beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory); 		beanFactory.registerResolvableDependency(ResourceLoader.class, this); 		beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this); 		beanFactory.registerResolvableDependency(ApplicationContext.class, this);  		// Register early post-processor for detecting inner beans as ApplicationListeners. 		// 添加一个事件监听器的装饰器 		beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this));  		// Detect a LoadTimeWeaver and prepare for weaving, if found. 		// aop织入 编译器织入、运行期织入、类加载织入 		if (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) { 			beanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory)); 			// Set a temporary ClassLoader for type matching. 			beanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader())); 		}  		// Register default environment beans. 		// 注册环境信息 		if (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) { 			beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment()); 		} 		if (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) { 			beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties()); 		} 		if (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) { 			beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment()); 		} 	}</code></pre> <p>这个方法中主要做了以下事情：</p> <ul> <li>设置BeanFactory的类加载器。</li> <li>设置Bean的SPEL表达式的解析器，其作用是对值进行表达式的解析，比如在属性填充时，针对值是Properties或者String类型的时候就会使用el表达式进行解析。</li> <li>设置属性编辑器的注册器，作用是对属性进行解析，比如在属性填充时，针对字符串String类型的时候进行类型转换，就可以自定义属性编辑器针对性的进行解析操作。</li> <li>添加一些内置的BeanPostProcessor用于后面对象初始化时调用。</li> <li>设置环境信息，系统属性，系统环境变量等。</li> </ul> <p>这个方法预留了一些扩展点，比如可以添加自定义的属性编辑器，添加自定义的BeanPostProcessor等。</p> <h3 id="定制bean的属性解析器">定制Bean的属性解析器</h3> <p>我们知道在<code>Bean</code>的初始化时是分为两步，一步是属性填充，一步是初始化，在属性填充的时候，<code>Spring</code>会针对属性进行解析，如果属性值对应的类型和传入的值类型不一致，就会进行值的自定义解析，前提是你自定义了属性解析器，否则就会报错：<strong>报值的类型转换失败</strong>。</p> <p>接下来我们自定义一个属性解析器，比如我现在有个类<code>CustomUser</code>，其中有个属性类型是<code>Address</code>，还有个属性类型是<code>Date</code>，但是我在定义<code>Bean</code>的时候我把<code>address</code>属性设置为<code>xxx_xxx_xxx</code>，表示xxx省xxx市xxx区（县）,date属性设置为<code>yyyy-MM-dd HH:mm:ss</code>格式的日期，我要让<code>Spring</code>帮我解析出正确的值出来，话不多说，上代码。</p> <h4 id="编写customuser类以及address类">编写CustomUser类以及Address类</h4> <ul> <li>Address类</li> </ul> <pre><code class="language-java">/**  * @author &lt;a href="https://www.cnblogs.com/redwinter/"&gt;redwinter&lt;/a&gt;  * @since 1.0  **/ public class Address {  	private String province; 	private String city; 	private String town;  	public String getProvince() { 		return province; 	}  	public void setProvince(String province) { 		this.province = province; 	}   	public String getCity() { 		return city; 	}  	public void setCity(String city) { 		this.city = city; 	}  	public String getTown() { 		return town; 	}  	public void setTown(String town) { 		this.town = town; 	}  	// 为了验证重写toString方法 	@Override 	public String toString() { 		return "Address{" + 				"province='" + province + '\'' + 				", city='" + city + '\'' + 				", town='" + town + '\'' + 				'}'; 	} }</code></pre> <ul> <li>CustomUser类</li> </ul> <pre><code class="language-java">/**  * @author &lt;a href="https://www.cnblogs.com/redwinter/"&gt;redwinter&lt;/a&gt;  * @since 1.0  **/ public class CustomUser { 	private String name; 	private Address address; 	private Date date;  	public Date getDate() { 		return date; 	}  	public void setDate(Date date) { 		this.date = date; 	}  	public String getName() { 		return name; 	}  	public void setName(String name) { 		this.name = name; 	}  	public Address getAddress() { 		return address; 	}  	public void setAddress(Address address) { 		this.address = address; 	}  	@Override 	public String toString() { 		return "CustomUser{" + 				"name='" + name + '\'' + 				", address=" + address + 				", date=" + date + 				'}'; 	} }</code></pre> <h4 id="编写address解析器和注册器">编写Address解析器和注册器</h4> <ul> <li>解析器（编辑器）</li> </ul> <pre><code class="language-java">/**  * @author &lt;a href="https://www.cnblogs.com/redwinter/"&gt;redwinter&lt;/a&gt;  * @since 1.0  **/ public class AddressPropertyEditor extends PropertyEditorSupport {  	@Override 	public void setAsText(String text) throws IllegalArgumentException { 		/** 		 * 自定义属性编辑器，将属性解析成自定义对象，比如传入的是一个字符串，可以解析成另外一个对象 		 */ 		String[] arr = text.split("_"); 		Address address = new Address(); 		address.setProvince(arr[0]); 		address.setCity(arr[1]); 		address.setTown(arr[2]); 		// 设置值 		setValue(address); 	} }</code></pre> <ul> <li>注册器</li> </ul> <pre><code class="language-java">/**  * @author &lt;a href="https://www.cnblogs.com/redwinter/"&gt;redwinter&lt;/a&gt;  * @since 1.0  **/ public class AddressPropertyEditorRegistrar implements PropertyEditorRegistrar { 	@Override 	public void registerCustomEditors(PropertyEditorRegistry registry) { 		registry.registerCustomEditor(Address.class,new AddressPropertyEditor()); 	} }</code></pre> <h4 id="编写date解析器和注册器">编写Date解析器和注册器</h4> <ul> <li>解析器（编辑器）</li> </ul> <pre><code class="language-java">/**  * @author &lt;a href="https://www.cnblogs.com/redwinter/"&gt;redwinter&lt;/a&gt;  * @since 1.0  **/ public class DatePropertyEditor extends PropertyEditorSupport {  	private final DateFormat dateFormat;  	public DatePropertyEditor(DateFormat dateFormat) { 		this.dateFormat = dateFormat; 	}  	@Override 	public void setAsText(String text) throws IllegalArgumentException { 		if (!StringUtils.hasText(text)) { 			System.out.println("日期类型的属性不能为空！"); 			return; 		} 		try { 			Date date = dateFormat.parse(text); 			setValue(date); 		} catch (ParseException e) { 			e.printStackTrace(); 		} 	} }</code></pre> <ul> <li>注册器</li> </ul> <pre><code class="language-java">/**  * @author &lt;a href="https://www.cnblogs.com/redwinter/"&gt;redwinter&lt;/a&gt;  * @since 1.0  **/ public class DatePropertyEditorRegistrar implements PropertyEditorRegistrar { 	@Override 	public void registerCustomEditors(PropertyEditorRegistry registry) { 		registry.registerCustomEditor(Date.class,new DatePropertyEditor(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"))); 	} }</code></pre> <h4 id="配置注册器到spring容器中">配置注册器到Spring容器中</h4> <p>配置注册器有两种方式，一种是直接在定制<code>BeanFactory</code>的方法中添加注册器，一种是在<code>Spring</code>配置文件中添加</p> <p>我在<code>Spring</code>容器中先配置<code>CustomUser</code>的信息以及<code>Date</code>日期类型的注册器：</p> <pre><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;beans xmlns="http://www.springframework.org/schema/beans" 	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc" 	   xmlns:context="http://www.springframework.org/schema/context" 	   xmlns:redwinter="http://www.redwinter.com/schema/redwinter" 	   xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd 		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-3.1.xsd 		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd 		http://www.redwinter.com/schema/redwinter  http://www.redwinter.com/schema/redwinter.xsd 		"&gt;  	&lt;!--自定义标签--&gt; 	&lt;redwinter:dl id ="redwinter" email="abc@qq.com" password="123456" username="redwinter-name"/&gt; 	&lt;redwinter:dl id ="redwinter123456"  email="123456-abc@qq.com" password="123456" username="redwinter-name"/&gt; 	&lt;!--自定义属性编辑器的解析器--&gt; 	&lt;bean class="com.redwinter.test.CustomUser"&gt; 		&lt;property name="name" value="冬玲记忆"/&gt; 		&lt;property name="address" value="四川省_成都市_郫都区"/&gt; 		&lt;property name="date" value="2022-04-19 19:50:20"/&gt; 	&lt;/bean&gt; 	&lt;!--配置自定义的编辑器注册器--&gt; 	&lt;bean class="org.springframework.beans.factory.config.CustomEditorConfigurer"&gt; 		&lt;property name="propertyEditorRegistrars"&gt; 			&lt;list&gt; 				&lt;bean class="com.redwinter.test.DatePropertyEditorRegistrar"/&gt; 			&lt;/list&gt; 		&lt;/property&gt; 	&lt;/bean&gt;  &lt;/beans&gt;</code></pre> <p>另外还有个<code>Address</code>的注册器我配置在定制<code>BeanFactory</code>的方法中：</p> <pre><code class="language-java">@Override protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) {   // 扩展点 设置不去处理循环依赖或者beanDefinition覆盖   super.setAllowBeanDefinitionOverriding(true);   super.setAllowCircularReferences(true);   super.customizeBeanFactory(beanFactory);   // 添加一个自定义的属性编辑器的注册器   beanFactory.addPropertyEditorRegistrar(new AddressPropertyEditorRegistrar()); }</code></pre> <p>好了，配置完成，运行试试：</p> <pre><code class="language-java">public class BeanCreate {  	@Test 	public void classPathXml() { //		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("classpath:spring-test.xml"); 		ClassPathXmlApplicationContext context = new MyClassPathXmlApplicationContext("classpath:spring-test.xml");  		Redwinter redwinter = (Redwinter) context.getBean("redwinter"); 		System.out.println(redwinter.getEmail());  		Redwinter redwinter123456 = (Redwinter) context.getBean("redwinter123456"); 		System.out.println(redwinter123456.getEmail());  		CustomUser bean = context.getBean(CustomUser.class); 		System.out.println(bean); 	} }</code></pre> <p>输出日志：</p> <pre><code class="language-java">abc@qq.com 123456-abc@qq.com CustomUser{name='冬玲记忆', address=Address{province='四川省', city='成都市', town='郫都区'}, date=Tue Apr 19 19:50:20 CST 2022}</code></pre> <p>说明配置没有问题，输出了想要的结果。</p> <p><strong>这里有个疑问为什么你知道在编写注册器和解析器的时候需要实现这些类呢？</strong></p> <p>其实原因很简单，根据源码我们知道<code>Spring</code>默认添加了一个<code>ResourceEditorRegistrar</code>注册器，进去<code>ResourceEditorRegistrar</code>类中发现，他实现了<code>PropertyEditorRegistrar</code>接口，然后重写了<code>registerCustomEditors</code>方法，在这个方法中他添加了很多编辑器：</p> <pre><code class="language-java">@Override 	public void registerCustomEditors(PropertyEditorRegistry registry) { 		ResourceEditor baseEditor = new ResourceEditor(this.resourceLoader, this.propertyResolver); 		doRegisterEditor(registry, Resource.class, baseEditor); 		doRegisterEditor(registry, ContextResource.class, baseEditor); 		doRegisterEditor(registry, InputStream.class, new InputStreamEditor(baseEditor)); 		doRegisterEditor(registry, InputSource.class, new InputSourceEditor(baseEditor)); 		doRegisterEditor(registry, File.class, new FileEditor(baseEditor)); 		doRegisterEditor(registry, Path.class, new PathEditor(baseEditor)); 		doRegisterEditor(registry, Reader.class, new ReaderEditor(baseEditor)); 		doRegisterEditor(registry, URL.class, new URLEditor(baseEditor));  		ClassLoader classLoader = this.resourceLoader.getClassLoader(); 		doRegisterEditor(registry, URI.class, new URIEditor(classLoader)); 		doRegisterEditor(registry, Class.class, new ClassEditor(classLoader)); 		doRegisterEditor(registry, Class[].class, new ClassArrayEditor(classLoader));  		if (this.resourceLoader instanceof ResourcePatternResolver) { 			doRegisterEditor(registry, Resource[].class, 					new ResourceArrayPropertyEditor((ResourcePatternResolver) this.resourceLoader, this.propertyResolver)); 		} 	}</code></pre> <p>继续点<code>doRegisterEditor</code>方法发现最终是将这些编辑器加入到了<code>PropertyEditorRegistry</code>接口的默认实现类<code>PropertyEditorRegistrySupport</code>类的<code>customEditors</code>属性中，而且你还在这个类中发现，有很多的编辑器是默认加载进去的：</p> <pre><code class="language-java">private void createDefaultEditors() { 		this.defaultEditors = new HashMap&lt;&gt;(64);  		// Simple editors, without parameterization capabilities. 		// The JDK does not contain a default editor for any of these target types. 		this.defaultEditors.put(Charset.class, new CharsetEditor()); 		this.defaultEditors.put(Class.class, new ClassEditor()); 		this.defaultEditors.put(Class[].class, new ClassArrayEditor()); 		this.defaultEditors.put(Currency.class, new CurrencyEditor()); 		this.defaultEditors.put(File.class, new FileEditor()); 		this.defaultEditors.put(InputStream.class, new InputStreamEditor()); 		this.defaultEditors.put(InputSource.class, new InputSourceEditor()); 		this.defaultEditors.put(Locale.class, new LocaleEditor()); 		this.defaultEditors.put(Path.class, new PathEditor()); 		this.defaultEditors.put(Pattern.class, new PatternEditor()); 		this.defaultEditors.put(Properties.class, new PropertiesEditor()); 		this.defaultEditors.put(Reader.class, new ReaderEditor()); 		this.defaultEditors.put(Resource[].class, new ResourceArrayPropertyEditor()); 		this.defaultEditors.put(TimeZone.class, new TimeZoneEditor()); 		this.defaultEditors.put(URI.class, new URIEditor()); 		this.defaultEditors.put(URL.class, new URLEditor()); 		this.defaultEditors.put(UUID.class, new UUIDEditor()); 		this.defaultEditors.put(ZoneId.class, new ZoneIdEditor());  		// Default instances of collection editors. 		// Can be overridden by registering custom instances of those as custom editors. 		this.defaultEditors.put(Collection.class, new CustomCollectionEditor(Collection.class)); 		this.defaultEditors.put(Set.class, new CustomCollectionEditor(Set.class)); 		this.defaultEditors.put(SortedSet.class, new CustomCollectionEditor(SortedSet.class)); 		this.defaultEditors.put(List.class, new CustomCollectionEditor(List.class)); 		this.defaultEditors.put(SortedMap.class, new CustomMapEditor(SortedMap.class));  		// Default editors for primitive arrays. 		this.defaultEditors.put(byte[].class, new ByteArrayPropertyEditor()); 		this.defaultEditors.put(char[].class, new CharArrayPropertyEditor());  		// The JDK does not contain a default editor for char! 		this.defaultEditors.put(char.class, new CharacterEditor(false)); 		this.defaultEditors.put(Character.class, new CharacterEditor(true));  		// Spring's CustomBooleanEditor accepts more flag values than the JDK's default editor. 		this.defaultEditors.put(boolean.class, new CustomBooleanEditor(false)); 		this.defaultEditors.put(Boolean.class, new CustomBooleanEditor(true));  		// The JDK does not contain default editors for number wrapper types! 		// Override JDK primitive number editors with our own CustomNumberEditor. 		this.defaultEditors.put(byte.class, new CustomNumberEditor(Byte.class, false)); 		this.defaultEditors.put(Byte.class, new CustomNumberEditor(Byte.class, true)); 		this.defaultEditors.put(short.class, new CustomNumberEditor(Short.class, false)); 		this.defaultEditors.put(Short.class, new CustomNumberEditor(Short.class, true)); 		this.defaultEditors.put(int.class, new CustomNumberEditor(Integer.class, false)); 		this.defaultEditors.put(Integer.class, new CustomNumberEditor(Integer.class, true)); 		this.defaultEditors.put(long.class, new CustomNumberEditor(Long.class, false)); 		this.defaultEditors.put(Long.class, new CustomNumberEditor(Long.class, true)); 		this.defaultEditors.put(float.class, new CustomNumberEditor(Float.class, false)); 		this.defaultEditors.put(Float.class, new CustomNumberEditor(Float.class, true)); 		this.defaultEditors.put(double.class, new CustomNumberEditor(Double.class, false)); 		this.defaultEditors.put(Double.class, new CustomNumberEditor(Double.class, true)); 		this.defaultEditors.put(BigDecimal.class, new CustomNumberEditor(BigDecimal.class, true)); 		this.defaultEditors.put(BigInteger.class, new CustomNumberEditor(BigInteger.class, true));  		// Only register config value editors if explicitly requested. 		if (this.configValueEditorsActive) { 			StringArrayPropertyEditor sae = new StringArrayPropertyEditor(); 			this.defaultEditors.put(String[].class, sae); 			this.defaultEditors.put(short[].class, sae); 			this.defaultEditors.put(int[].class, sae); 			this.defaultEditors.put(long[].class, sae); 		} 	}</code></pre> <p>所以为什么我们在定义<code>Bean</code>属性的时候这些默认的属性会自动帮你转换出来，就是这个原因。那么注册器的编写我们也可以直接实现<code>PropertyEditorRegistrar</code>这个接口，然后重写<code>registerCustomEditors</code>方法把自定义的编辑器加入即可。</p> <p><strong>那编辑器怎么实现呢？</strong></p> <p>编辑器的话自然也就很简单了，随便点击一个编辑器看下他是怎么实现的，你就可以实现出来了，最终发现这些编辑器都是继承了<code>PropertyEditorSupport</code>这个类，而<code>PropertyEditorSupport</code>这个类实现了<code>PropertyEditor</code>这个接口，<strong>那这么方法实现哪个呢？</strong></p> <p>不着急看源码：</p> <pre><code class="language-java">	private Object doConvertTextValue(@Nullable Object oldValue, String newTextValue, PropertyEditor editor) { 		try { 			editor.setValue(oldValue); 		} 		catch (Exception ex) { 			if (logger.isDebugEnabled()) { 				logger.debug("PropertyEditor [" + editor.getClass().getName() + "] does not support setValue call", ex); 			} 			// Swallow and proceed. 		} 		// 调动转换方法，这里就会调用到自定义的属性编辑器中，执行自定义的逻辑转换 		editor.setAsText(newTextValue); 		return editor.getValue(); 	}</code></pre> <p>源码明确写了使用编辑器调用<code>setAsText</code>方法进行新值的转换，然后再去获取<code>getValue</code>得到值，那么说明只需要重写<code>setAsText</code>方法并且将转换的值调用<code>setValue</code>方法即可。</p> <p>所以我们直接继承<code>PropertyEditorSupport</code>类，然后重写<code>setAsText</code>方法即可实现属性值的解析和转换。</p> <p>接下来就是分析<code>AbstractApplicationContext#refresh</code>方法的第四个方法和第五个方法，第四个方法<code>postProcessBeanFactory</code>是一个空方法，留给子类实现，第五个方法<code>invokeBeanFactoryPostProcessors</code> 是执行<code>BeanFactoryPostProcessor</code>，这篇就到这里，下一篇文章继续。</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-60026.htm">动物打疫苗注意事项有哪些方面（动物打疫苗有什么作用）</a></p>
                                        <p>下一个：<a href="/news/article-60589.htm">金吉拉宠物猫多少钱（金吉拉猫多少钱一个）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-1-8-loon-node-github.htm" title="「1月8日」最高速度21.4M/S，2025年Github Loon每天更新免费机场订阅节点链接">「1月8日」最高速度21.4M/S，2025年Github Loon每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-29-loon-node-github.htm" title="「11月29日」最高速度18M/S，2024年Github Loon每天更新免费机场订阅节点链接">「11月29日」最高速度18M/S，2024年Github Loon每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-39197.htm" title="宠物猫疫苗多少钱一次啊（宠物猫疫苗多少钱一次啊）">宠物猫疫苗多少钱一次啊（宠物猫疫苗多少钱一次啊）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-21-free-loon-node.htm" title="「2月21日」最高速度18M/S，2025年Github Loon每天更新免费机场订阅节点链接">「2月21日」最高速度18M/S，2025年Github Loon每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-56597.htm" title="中国最大的宠物粮生产厂家在哪里呀（中国最大的宠物粮生产厂家在哪里呀视频）">中国最大的宠物粮生产厂家在哪里呀（中国最大的宠物粮生产厂家在哪里呀视频）</a></li>
                        <li class="py-2"><a href="/news/article-53292.htm" title="免费的狗语翻译器（免费的狗语翻译器软件）">免费的狗语翻译器（免费的狗语翻译器软件）</a></li>
                        <li class="py-2"><a href="/news/article-34343.htm" title="SpringCloudConfig集成Bus消息总线实现动态刷新配置(全局广播和定点通知)">SpringCloudConfig集成Bus消息总线实现动态刷新配置(全局广播和定点通知)</a></li>
                        <li class="py-2"><a href="/news/article-19868.htm" title="动物医院诊疗许可证办理要求标准是什么（动物医院办理条件）">动物医院诊疗许可证办理要求标准是什么（动物医院办理条件）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-26-free-node-subscribe-links.htm" title="「11月26日」最高速度18.1M/S，2024年Github Loon每天更新免费机场订阅节点链接">「11月26日」最高速度18.1M/S，2024年Github Loon每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-27719.htm" title="狗粮十大品牌排行榜视频大全（狗粮排行榜前十）">狗粮十大品牌排行榜视频大全（狗粮排行榜前十）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">69</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- //section -->    
        <!-- footer17 -->
    <section class="footer-17">
        <div class="footer17_sur py-5">
            <div class="copyright text-center">
                <div class="container">
                    <p class="copy-footer-29">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                        Github Loon节点订阅官网 版权所有 Powered by WordPress
                    </p>
                </div>
            </div>
            <!-- move top -->
            <button onclick="topFunction()" id="movetop" title="Go to top">
                &#10548;
            </button>
            <script>
            // When the user scrolls down 20px from the top of the document, show the button
            window.onscroll = function() {
                scrollFunction()
            };

            function scrollFunction() {
                if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                    document.getElementById("movetop").style.display = "block";
                } else {
                    document.getElementById("movetop").style.display = "none";
                }
            }

            // When the user clicks on the button, scroll to the top of the document
            function topFunction() {
                document.body.scrollTop = 0;
                document.documentElement.scrollTop = 0;
            }
            </script>
            <!-- /move top -->
        </div>
    </section>
    <!-- //footer17 -->
    <!-- Template JavaScript -->
    <script src="/assets/website/js/frontend/githubloon/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/githubloon/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <!-- pricing tabs js -->
    <script src="/assets/website/js/frontend/githubloon/tabs.js"></script>
    <!-- owlcarousel -->
    <script src="/assets/website/js/frontend/githubloon/owl.carousel.js"></script>
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            nav: false,
            margin: 50,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 2,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- script for tesimonials agency carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-agency").owlCarousel({
            loop: true,
            nav: false,
            margin: 50,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials agency carousel slider -->
    <!-- magnific popup -->
    <script src="/assets/website/js/frontend/githubloon/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //magnific popup -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <script src="/assets/website/js/frontend/githubloon/bootstrap.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>