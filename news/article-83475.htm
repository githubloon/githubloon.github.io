<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://githubloon.github.io/news/article-83475.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>游戏开发设计模式：单例模式</title>
        <meta name="description" content="文章目录  一、单例模式     1.1 单例模式总结介绍   1.1.1什么是单例模式 1.1.2单例模式分类 1.1.3单例类特点 1.1.4如何保证线程安全？   1.2 单例模式的几种写法  " />
        <link rel="icon" href="/assets/website/img/githubloon/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Github Loon节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://githubloon.github.io/news/article-83475.htm" />
    <meta property="og:site_name" content="Github Loon节点订阅官网" />
    <meta property="og:title" content="游戏开发设计模式：单例模式" />
    <meta property="og:image" content="https://githubloon.github.io/uploads/20240820/7df2587e9b73a13c75d2bead60613b45.webp" />
        <meta property="og:release_date" content="2025-03-28T09:56:34" />
    <meta property="og:updated_time" content="2025-03-28T09:56:34" />
        <meta property="og:description" content="文章目录  一、单例模式     1.1 单例模式总结介绍   1.1.1什么是单例模式 1.1.2单例模式分类 1.1.3单例类特点 1.1.4如何保证线程安全？   1.2 单例模式的几种写法  " />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="游戏开发设计模式：单例模式">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Google fonts -->
    <link href="//fonts.googleapis.com/css2?family=DM+Sans:wght@400;700&display=swap" rel="stylesheet">
    <!-- Template CSS -->
    <link rel="stylesheet" href="/assets/website/css/githubloon/style-starter.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-9MPH6JPQCT"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-9MPH6JPQCT');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <div class="header-saas">
        <!-- header -->
        <header id="site-header" class="fixed-top">
            <div class="container">
                <nav class="navbar navbar-expand-lg stroke">
                    <a class="navbar-brand" href="/">
                                        <span>Github Loon</span>
                                        </a>
                    <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                        <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                        </span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                        <ul class="navbar-nav ml-auto">
                                                        <li class="nav-item">
                                <a class="nav-link" href="/">首页</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/free-nodes/">免费节点</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/client.htm">客户端</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/news/">新闻资讯</a>
                            </li>
                                                    </ul>
                    </div>
                    <!-- toggle switch for light and dark theme -->
                    <div class="mobile-position">
                        <nav class="navigation">
                            <div class="theme-switch-wrapper">
                                <label class="theme-switch" for="checkbox">
                                    <input type="checkbox" id="checkbox">
                                    <div class="mode-container">
                                        <i class="gg-sun"></i>
                                        <i class="gg-moon"></i>
                                    </div>
                                </label>
                            </div>
                        </nav>
                    </div>
                    <!-- //toggle switch for light and dark theme -->
                </nav>
            </div>
        </header>
        <!-- //header -->
    </div>
    <div class="innerblock">
    </div>
    <!-- contact-form 2 -->
    <section class="w3l-contact-2 py-5" id="contact">
        <div class="container py-lg-4 py-md-3 py-2">
            <div class="title-content text-center">
                <h1 class="title-toobig">游戏开发设计模式：单例模式</h1>
                <p class="mt-md-4 mt-3 mx-lg-5 px-lg-5">
                    <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                </p>
            </div>
    </section>
    <!-- section -->
    <section class="w3l-index3" id="about">
        <div class="midd-w3 py-5">
            <div class="container py-lg-5 py-md-3 py-2">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> </h1> <div class="toc"> <h3>文章目录</h3> <ul> <li><a href="#_0" rel="nofollow">一、单例模式</a></li> <li> <ul> <li> <ul> <li><a href="#11__2" rel="nofollow">1.1 单例模式总结介绍</a></li> <li> <ul> <li><a href="#111_3" rel="nofollow">1.1.1什么是单例模式</a></li> <li><a href="#112_6" rel="nofollow">1.1.2单例模式分类</a></li> <li><a href="#113_10" rel="nofollow">1.1.3单例类特点</a></li> <li><a href="#114_14" rel="nofollow">1.1.4如何保证线程安全？</a></li> </ul> </li> <li><a href="#12__17" rel="nofollow">1.2 单例模式的几种写法</a></li> <li> <ul> <li><a href="#121____18" rel="nofollow">1.2.1普通懒汉式单例 （ 线程不安全 ）</a></li> <li><a href="#122____58" rel="nofollow">1.2.2加锁的懒汉式单例 （ 线程安全 ）</a></li> <li><a href="#123C11__101" rel="nofollow">1.2.3内部静态变量的懒汉单例（C++11 线程安全）</a></li> <li><a href="#124__125" rel="nofollow">1.2.4饿汉式单例 （本身就线程安全）</a></li> </ul> </li> <li><a href="#13__155" rel="nofollow">1.3 单例模式的优缺点</a></li> <li><a href="#14__159" rel="nofollow">1.4 在游戏中的应用</a></li> </ul> </li> </ul> </li> </ul> </div> <h3><a id="11__2" rel="nofollow"></a>1.1 单例模式总结介绍</h3> <h4><a id="111_3" rel="nofollow"></a>1.1.1什么是单例模式</h4> <p>单例模式指在整个系统生命周期里，<strong>保证一个类只能产生一个实例</strong>，确保该类的唯一性。</p> <h4><a id="112_6" rel="nofollow"></a>1.1.2单例模式分类</h4> <p>单例模式可以分为懒汉式和饿汉式，两者之间的区别在于创建实例的时间不同：</p> <ul> <li><strong>懒汉式：</strong> 指系统运行中，实例并不存在，只有当需要使用该实例时，才会去创建并使用实例。（这种方式要考虑线程安全）</li> <li><strong>饿汉式：</strong> 指系统一运行，就初始化创建实例，当需要时，直接调用即可。（本身就线程安全，没有多线程的问题）</li> </ul> <h4><a id="113_10" rel="nofollow"></a>1.1.3单例类特点</h4> <ul> <li>构造函数和析构函数为private类型，目的<strong>禁止外部构造和析构</strong></li> <li>拷贝构造和赋值构造函数为private类型，目的是禁止外部拷贝和赋值，确保实例的唯一性</li> <li>类里有个可以全局访问的获取实例的静态函数</li> </ul> <h4><a id="114_14" rel="nofollow"></a>1.1.4如何保证线程安全？</h4> <ul> <li>加锁访问</li> <li>进程开始的时候直接初始化，不管是否使用（这个只确保在初始化的时候只有一份实例）</li> </ul> <h3><a id="12__17" rel="nofollow"></a>1.2 单例模式的几种写法</h3> <h4><a id="121____18" rel="nofollow"></a>1.2.1普通懒汉式单例 （ 线程不安全 ）</h4> <pre><code class="prism language-cpp"><span class="token keyword">class</span><span class="token class-name">Singleton</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">// 外部接口，获取单例对象指针</span><span class="token keyword">static</span> Singleton<span class="token operator">*</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 释放单例，进程退出时调用</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">deleteInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token comment">// 将其构造和析构成为私有的, 禁止外部构造和析构,后续代码就不再重复添加这块</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">~</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将其拷贝构造和赋值构造成为私有函数, 禁止外部拷贝和赋值</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token keyword">const</span> Singleton<span class="token operator">&amp;</span>signal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Singleton<span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Singleton<span class="token operator">&amp;</span>signal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token comment">// 唯一单例对象指针</span><span class="token keyword">static</span> Singleton<span class="token operator">*</span>m_SingleInstance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//初始化静态成员变量</span> Singleton<span class="token operator">*</span>Singleton<span class="token operator">::</span>m_SingleInstance<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span> Singleton<span class="token operator">*</span>Singleton<span class="token operator">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>m_SingleInstance<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 		m_SingleInstance<span class="token operator">=</span><span class="token keyword">new</span><span class="token punctuation">(</span>std<span class="token operator">::</span>nothrow<span class="token punctuation">)</span> Singleton<span class="token punctuation">;</span><span class="token comment">// 没有加锁是线程不安全的，当线程并发时会创建多个实例</span><span class="token punctuation">}</span><span class="token keyword">return</span> m_SingleInstance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Singleton<span class="token operator">::</span><span class="token function">deleteInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>m_SingleInstance<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">delete</span> m_SingleInstance<span class="token punctuation">;</span>         m_SingleInstance<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h4><a id="122____58" rel="nofollow"></a>1.2.2加锁的懒汉式单例 （ 线程安全 ）</h4> <pre><code class="prism language-cpp"><span class="token keyword">class</span><span class="token class-name">Singleton</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">// 获取单实例对象</span><span class="token keyword">static</span> Singleton<span class="token operator">*</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放单实例，进程退出时调用</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">deleteInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token comment">// 将其构造和析构成为私有的, 禁止外部构造和析构...</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token comment">// 唯一单实例对象指针</span><span class="token keyword">static</span> Singleton<span class="token operator">*</span>m_SingleInstance<span class="token punctuation">;</span><span class="token keyword">static</span> std<span class="token operator">::</span>mutex m_Mutex<span class="token punctuation">;</span><span class="token comment">// 锁</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//初始化静态成员变量</span> Singleton<span class="token operator">*</span>Singleton<span class="token operator">::</span>m_SingleInstance<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span> std<span class="token operator">::</span>mutex Singleton<span class="token operator">::</span>m_Mutex<span class="token punctuation">;</span> Singleton<span class="token operator">*</span> Singleton<span class="token operator">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//  这里使用了两个 if判断语句的技术称为双检锁；好处是，只有判断指针为空的时候才加锁，</span><span class="token comment">//  避免每次调用 GetInstance的方法都加锁，锁的开销毕竟还是有点大的。</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_SingleInstance<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         std<span class="token operator">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token operator">::</span>mutex<span class="token operator">&gt;</span><span class="token function">lock</span><span class="token punctuation">(</span>m_Mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 加锁</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_SingleInstance<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             m_SingleInstance<span class="token operator">=</span><span class="token keyword">new</span><span class="token punctuation">(</span>std<span class="token operator">::</span>nothrow<span class="token punctuation">)</span> Singleton<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> m_SingleInstance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Singleton<span class="token operator">::</span><span class="token function">deleteInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>     std<span class="token operator">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token operator">::</span>mutex<span class="token operator">&gt;</span><span class="token function">lock</span><span class="token punctuation">(</span>m_Mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 加锁，避免释放两次</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_SingleInstance<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">delete</span> m_SingleInstance<span class="token punctuation">;</span>         m_SingleInstance<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h4><a id="123C11__101" rel="nofollow"></a>1.2.3内部静态变量的懒汉单例（C++11 线程安全）</h4> <pre><code class="prism language-cpp"><span class="token keyword">class</span><span class="token class-name">Singleton</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">// 获取单实例对象</span><span class="token keyword">static</span> Singleton<span class="token operator">&amp;</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token comment">// 禁止外部构造</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 禁止外部析构</span><span class="token operator">~</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 禁止外部复制构造</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token keyword">const</span> Single<span class="token operator">&amp;</span>signal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 禁止外部赋值操作</span><span class="token keyword">const</span> Singleton<span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Singleton<span class="token operator">&amp;</span>Singleton<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> Singleton<span class="token operator">&amp;</span> Singleton<span class="token operator">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 局部静态特性的方式实现单实例</span><span class="token keyword">static</span> Singleton signal<span class="token punctuation">;</span><span class="token keyword">return</span> signal<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <h4><a id="124__125" rel="nofollow"></a>1.2.4饿汉式单例 （本身就线程安全）</h4> <pre><code class="prism language-cpp"><span class="token keyword">class</span><span class="token class-name">Singleton</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">// 获取单实例</span><span class="token keyword">static</span> Singleton<span class="token operator">*</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 释放单实例，进程退出时调用</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">deleteInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token comment">// 将其构造和析构成为私有的, 禁止外部构造和析构..</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token comment">// 唯一单实例对象指针</span><span class="token keyword">static</span> Singleton<span class="token operator">*</span>g_pSingleton<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 代码一运行就初始化创建实例 ，本身就线程安全</span> Singleton<span class="token operator">*</span> Singleton<span class="token operator">::</span>g_pSingleton<span class="token operator">=</span><span class="token keyword">new</span><span class="token punctuation">(</span>std<span class="token operator">::</span>nothrow<span class="token punctuation">)</span> Singleton<span class="token punctuation">;</span> Singleton<span class="token operator">*</span> Singleton<span class="token operator">::</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> g_pSingleton<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Singleton<span class="token operator">::</span><span class="token function">deleteInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>g_pSingleton<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">delete</span> g_pSingleton<span class="token punctuation">;</span>         g_pSingleton<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h3><a id="13__155" rel="nofollow"></a>1.3 单例模式的优缺点</h3> <p>单例模式就像一个被封装在类里面的全局变量，所以全局变量有的缺点它都有：<strong>多线程不友好</strong>、<strong>代码耦合度高</strong>、<strong>追踪状态变化困难</strong>。<br /> 但是单例模式的有点还是很明显的，就是<strong>访问方便</strong>，直接使用全局唯一访问接口就能访问到类。只要包含头文件谁都可以进行访问，没有限制。<br /> 便利的访问是使用单例的主要原因，能够让随时随地获取所需的对象</p> <h3><a id="14__159" rel="nofollow"></a>1.4 在游戏中的应用</h3> <p>游戏中的许多单例类都是<strong>Manager类型</strong>功能，通常这些“管理类”的功能就是管理其他对象，或者就是一个工具类，比如专门写日志的。。<br /> 当需要管理游戏内一类对象的时候，只需要一个全局<strong>Manager类型</strong> 的保姆就可以了。<br /> 在确定使用单例模式前，需要确定是否类实例化出的对象是否是一定是全局唯一的。<br /> 就比如一个游戏中，写日志的类只有一个就可以了，那么就声明一个全局访问写日志的接口。<br /> 或者是游戏资源数据的管理，在其他例如窗口类中，如果需要这个资源，那可以直接去访问这个全局接口，而不是说在类里面自己再重新加载一份。</p> <ul> <li>在游戏中，可能会有很多需要单例实现的帮助类，或者工具类，如果不希望每个类都写一遍单例模式，就可以<strong>使用模板去实现单例</strong>，然后让<strong>工具类们</strong>去<strong>继承</strong>这个模板类</li> </ul> <pre><code class="prism language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">&gt;</span><span class="token keyword">class</span><span class="token class-name">Singleton</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">static</span> T<span class="token operator">&amp;</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">static</span> T instance<span class="token punctuation">;</span><span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">Singleton</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span><span class="token keyword">virtual</span><span class="token operator">~</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">default</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span><span class="token class-name">Foo</span><span class="token operator">:</span><span class="token keyword">public</span> Singleton<span class="token operator">&lt;</span>Foo<span class="token operator">&gt;</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         cout<span class="token operator">&lt;&lt;</span><span class="token operator">&amp;</span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-82745.htm">宠物美容学多久能学会（宠物美容学多久可以开店）</a></p>
                                        <p>下一个：<a href="/news/article-83477.htm">宠物领养app设计思路（宠物领养app该如何设计）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-41180.htm" title="spring boot 导入配置文件">spring boot 导入配置文件</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-16-linux-loon-github.htm" title="「1月16日」最高速度21.2M/S，2025年Github Loon每天更新免费机场订阅节点链接">「1月16日」最高速度21.2M/S，2025年Github Loon每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-20-loon-node.htm" title="「1月20日」最高速度18.2M/S，2025年Github Loon每天更新免费机场订阅节点链接">「1月20日」最高速度18.2M/S，2025年Github Loon每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-77897.htm" title="动物疫苗检测有哪些国家标准要求 动物疫苗检测有哪些国家标准要求的">动物疫苗检测有哪些国家标准要求 动物疫苗检测有哪些国家标准要求的</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-31-loon-github.htm" title="「1月31日」最高速度20M/S，2025年Github Loon每天更新免费机场订阅节点链接">「1月31日」最高速度20M/S，2025年Github Loon每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-40188.htm" title="兽用疫苗营业执照办理流程（兽用疫苗营业执照办理流程图）">兽用疫苗营业执照办理流程（兽用疫苗营业执照办理流程图）</a></li>
                        <li class="py-2"><a href="/news/article-45632.htm" title="动物疫苗接种方法及注意事项视频教学下载 动物疫苗接种方法及注意事项视频教学下载">动物疫苗接种方法及注意事项视频教学下载 动物疫苗接种方法及注意事项视频教学下载</a></li>
                        <li class="py-2"><a href="/news/article-61196.htm" title="打完动物疫苗注意事项和禁忌症（动物打完疫苗可以洗澡吗）">打完动物疫苗注意事项和禁忌症（动物打完疫苗可以洗澡吗）</a></li>
                        <li class="py-2"><a href="/news/article-37767.htm" title="宠爱国际动物医院企业文化（宠爱国际动物医疗中心）">宠爱国际动物医院企业文化（宠爱国际动物医疗中心）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-27-loon-node-share.htm" title="「2月27日」最高速度22.8M/S，2025年Github Loon每天更新免费机场订阅节点链接">「2月27日」最高速度22.8M/S，2025年Github Loon每天更新免费机场订阅节点链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">87</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- //section -->    
        <!-- footer17 -->
    <section class="footer-17">
        <div class="footer17_sur py-5">
            <div class="copyright text-center">
                <div class="container">
                    <p class="copy-footer-29">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                        Github Loon节点订阅官网 版权所有 Powered by WordPress
                    </p>
                </div>
            </div>
            <!-- move top -->
            <button onclick="topFunction()" id="movetop" title="Go to top">
                &#10548;
            </button>
            <script>
            // When the user scrolls down 20px from the top of the document, show the button
            window.onscroll = function() {
                scrollFunction()
            };

            function scrollFunction() {
                if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                    document.getElementById("movetop").style.display = "block";
                } else {
                    document.getElementById("movetop").style.display = "none";
                }
            }

            // When the user clicks on the button, scroll to the top of the document
            function topFunction() {
                document.body.scrollTop = 0;
                document.documentElement.scrollTop = 0;
            }
            </script>
            <!-- /move top -->
        </div>
    </section>
    <!-- //footer17 -->
    <!-- Template JavaScript -->
    <script src="/assets/website/js/frontend/githubloon/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/githubloon/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <!-- pricing tabs js -->
    <script src="/assets/website/js/frontend/githubloon/tabs.js"></script>
    <!-- owlcarousel -->
    <script src="/assets/website/js/frontend/githubloon/owl.carousel.js"></script>
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            nav: false,
            margin: 50,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 2,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- script for tesimonials agency carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-agency").owlCarousel({
            loop: true,
            nav: false,
            margin: 50,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials agency carousel slider -->
    <!-- magnific popup -->
    <script src="/assets/website/js/frontend/githubloon/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //magnific popup -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <script src="/assets/website/js/frontend/githubloon/bootstrap.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>